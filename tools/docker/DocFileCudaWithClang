# Provide an argument to choose the compiler version from the command line
ARG CUDA_VERSION=10.0
ARG UBUNTU_VERSION=18.04 

FROM nvidia/cuda:${CUDA_VERSION}-devel-ubuntu${UBUNTU_VERSION} AS init
MAINTAINER Tobias Lasser <lasser@in.tum.de>
LABEL Description="Cuda develop with cmake/git and clang"

ADD scripts/install_base.sh /tmp/scripts/install_base.sh
RUN /tmp/scripts/install_base.sh
RUN apt-get update -qq && apt-get --no-install-recommends install -qq swig \
    libncurses5-dev libedit-dev libpthread-stubs0-dev lcov \
  && rm -rf /var/lib/apt/lists/*

# Copy CMake from the cmake image over to here 
ARG UBUNTU_VERSION 
 
FROM elsa/cmake:${UBUNTU_VERSION} AS cmake

FROM init AS base 
COPY --from=cmake /tmp/cmake-install /usr/local
 
FROM base AS clone-clang 

ARG CLANG_VERSION=8.0.1
ARG CLANG_TAG=llvmorg-${CLANG_VERSION}

RUN git clone --depth 1 --branch ${CLANG_TAG} https://github.com/llvm/llvm-project.git /tmp/llvm_project/
 
FROM base AS configure-clang
COPY --from=clone-clang /tmp/llvm_project/ /tmp/llvm_project/

RUN mkdir -p /tmp/llvm_build/ && mkdir -p /tmp/llvm_install/ \
  && cmake -S /tmp/llvm_project/llvm/ -B /tmp/llvm_build/ -GNinja -DLLVM_ENABLE_PROJECTS="clang;libcxx;libcxxabi;compiler-rt;openmp" \
           -DCMAKE_INSTALL_PREFIX=/tmp/llvm_install/ -DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD="host;NVPTX" -DLLVM_BUILD_LLVM_DYLIB=ON

### Build LLVM/clang
FROM base AS build-clang
COPY --from=configure-clang /tmp/llvm_project/ /tmp/llvm_project/
COPY --from=configure-clang /tmp/llvm_build/ /tmp/llvm_build/

# install a reduced version of clang (due to LLVM_INSTALL_TOOLCHAIN_ONLY=ON)
WORKDIR /tmp/llvm_build/
RUN ninja install
WORKDIR /

### Set base for clang ###
FROM base AS clang
COPY --from=build-clang /tmp/llvm_install/ /usr/local/

# Set enviorment variables
ENV CC="/usr/local/bin/clang"
ENV CXX="/usr/local/bin/clang++"
ENV PATH="$PATH:/usr/local/bin/"
ENV LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/usr/lib/x86_64-linux-gnu/:/usr/local/lib/"

# Build oneDNN with the compiler, we'll be using to build elsa with (ensure ABI is correct!)
FROM clang AS build-oneDNN
 
# Add script to isntall oneDNN 
ADD scripts/install_intel-oneDNN.sh /tmp/scripts/install_intel-oneDNN.sh
 
ARG ONEDNN_VERSION=1.6.2
RUN /tmp/scripts/install_intel-oneDNN.sh ${ONEDNN_VERSION}

# Copy oneDNN over 
FROM clang AS oneDNN
COPY --from=build-onednn /tmp/onednn_install/ /usr/local/

# Add test directory 
ADD tests/test_elsa.sh /tmp/tests/test_elsa.sh
 
CMD bash

