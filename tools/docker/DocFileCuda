# Provide an argument to choose the compiler version from the command line
ARG CUDA_VERSION=10.2
ARG UBUNTU_VERSION=18.04 
 
# Start with our CMake image 
FROM elsa/cmake:${UBUNTU_VERSION} AS copy-cmake
MAINTAINER Tobias Lasser <lasser@in.tum.de>
MAINTAINER David Frannk <frankd@in.tum.de>
LABEL Description="Cuda develop with cmake/git and clang"
 
ARG CUDA_VERSION
ARG UBUNTU_VERSION
  
# Take the cuda ubuntu devel image from the cuda repo
FROM nvidia/cuda:${CUDA_VERSION}-devel-ubuntu${UBUNTU_VERSION} AS base
 
# Copy the CMake install over to this image 
COPY --from=copy-cmake /tmp/cmake-install /usr/local

# Add scripts so we can install using them
ADD scripts/install_base.sh /tmp/scripts/install_base.sh
 
# Install our base image here 
RUN /tmp/scripts/install_base.sh 
 
ARG UBUNTU_VERSION 
ARG GCC_VERSION=8
 
# This avoid trouble configuring tzdata, which requires user input but fails in docker build step
ENV TZ=Europe/Berlin
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
 
# For Ubuntu 18, we hadd the ubuntu-toolchain repo and then install GCC-9 for both Ubuntu 20 and 18 
RUN set -ex; \
    echo "Version: ${UBUNTU_VERSION}" && \
    apt update && apt upgrade -qqy \
    && apt --no-install-recommends install build-essential software-properties-common -qqy; \
    if (test "${UBUNTU_VERSION}" = "18.04" ); then \
        add-apt-repository ppa:ubuntu-toolchain-r/test -qqy && apt update; \
    fi; \
    apt --no-install-recommends install gcc-${GCC_VERSION} g++-${GCC_VERSION} -qqy \
    && update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_VERSION} 100 \
       --slave /usr/bin/g++ g++ /usr/bin/g++-${GCC_VERSION} \
    && update-alternatives --config gcc && ldconfig \
    && apt autoremove && apt autoclean \
    && rm -rf /var/lib/apt/lists/*
  
# Set enviorment variables
ENV CC="gcc"
ENV CXX="g++"

# Install oneDNN using the compiler we'll be using with elsa
FROM base AS build-onednn
 
# Add oneDNN install script 
ADD scripts/install_intel-oneDNN.sh /tmp/scripts/install_intel-oneDNN.sh 
 
ARG ONEDNN_VERSION=1.6.2
RUN /tmp/scripts/install_intel-oneDNN.sh ${ONEDNN_VERSION}

# Copy it to our base image 
FROM base as onednn
COPY --from=build-onednn /tmp/onednn_install/ /usr/local/

# Add the test scripts 
ADD tests/test_elsa.sh /tmp/tests/test_elsa.sh

CMD bash

