@PACKAGE_INIT@

include(CMakeFindDependencyMacro)
find_dependency(Eigen3 3.3.7 REQUIRED)
find_dependency(OpenMP QUIET)

# for spdlog_header_only
find_dependency(Threads REQUIRED)

if(EXISTS "${CMAKE_CURRENT_LIST_DIR}/spdlogTargets.cmake")
    # this is used for in-repo build linking with the `export()` command
    include("${CMAKE_CURRENT_LIST_DIR}/spdlogTargets.cmake")
else()
    # this should not be needed, since the elsa:: targets provide
    # these PUBLIC dependencies transitively
    find_dependency(spdlog REQUIRED)
endif()

if(EXISTS "@CMAKE_CUDA_COMPILER@")
    enable_language(CUDA)
    find_library(CUDART_LIBRARY cudart ${CMAKE_CUDA_IMPLICIT_LINK_DIRECTORIES})
endif()

if(@ELSA_BUILD_WITH_QUICKVEC@) # ELSA_BUILD_WITH_QUICKVEC
    find_dependency(quickvec REQUIRED)
endif()

set(_supported_components @ELSA_REGISTERED_COMPONENTS@)

if(NOT elsa_FIND_COMPONENTS)
    # no specific components requested, include all
    find_dependency(elsa_all REQUIRED HINTS ${CMAKE_CURRENT_LIST_DIR})
    if (elsa_all_FOUND)
        include(${CMAKE_CURRENT_LIST_DIR}/elsa_allTargets.cmake)
    endif()
    message(STATUS "elsa found, using all modules")
else()
    # Include specific components
    foreach(_comp ${elsa_FIND_COMPONENTS})
        message(STATUS "elsa loading ${_comp}")
        if(NOT _comp IN_LIST _supported_components)
            set(elsa_FOUND False)
            set(elsa_NOT_FOUND_MESSAGE "Unsupported component: ${_comp}")
        endif()

        find_dependency(elsa_${_comp} REQUIRED)
        if (elsa_${_comp}_FOUND)
            message(STATUS "Including ${_comp}")
            include(${CMAKE_CURRENT_LIST_DIR}/elsa_${_comp}Targets.cmake)
        endif()
    endforeach()
    message(STATUS "elsa found, using components: ${elsa_FIND_COMPONENTS}")
endif()

check_required_components(elsa)
