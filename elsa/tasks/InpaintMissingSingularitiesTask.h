#pragma once

#include "elsaDefines.h"
#include "DataContainer.h"
#include "StrongTypes.h"
#include "ShearletTransform.h"
//#include "PhantomNet.h"

namespace elsa
{
    /**
     * @brief Class representing a task of inpainting missing singularities (coefficients) in
     * limited-angle or sparse CT scans
     *
     * This class offers three functionalities,
     * 1. Based on a given image, generate a limited-angle/sparse sinogram of it, and reconstruct
     * the original image using an l1-regularization with shearlets. ADMM is chosen as the solver
     * here.
     * 2. Train a PhantomNet model (fully convolutional NN) to learn intrinsic edge patterns of
     * natural-images, so that it can later properly infer the missing data in limited-angle scans,
     * in the Fourier domain.
     * 3. Combine the visible coefficients with the learned invisible coefficients inferred by
     * PhantomNet, i.e. apply the inverse shearlet transform to the sum of the direct shearlet
     * transforms of the l1-regularization with shearlets and shearlet transformed PhantomNet
     * output. This aims to tackle the limited-angle/sparse problem, thus generating a
     * reconstruction as close to the ground truth as possible, which actually is the final goal of
     * this task.
     *
     * Note that, if one requires to have finer-grained control over various elements and aspects of
     * this tasks, feel free to use the already-available relevant classes. This task exists to
     * offer ease of use in tackling the limited-angle/sparse problem through this hybrid approach.
     * For additional details, please refer to the references section.
     *
     * @author Andi Braimllari - initial code
     *
     * @tparam data_t data type for the domain and range of the SDLX task, defaulting to real_t
     *
     * References:
     * https://arxiv.org/pdf/1811.04602.pdf
     */
    template <typename data_t = real_t>
    class InpaintMissingSingularitiesTask // TODO what's a better name here?
    {
    public:
        InpaintMissingSingularitiesTask() = default;

        /// Simulates the limited-angle sinogram of the provided image and reconstructs the
        /// l1-regularization with shearlets by utilizing ADMM. By default the CUDA projector will
        /// be used if available.
        DataContainer<data_t> reconstructVisibleCoeffsOfLimitedAngleCT(
            DataContainer<data_t> image,
            std::pair<elsa::geometry::Degree, elsa::geometry::Degree> missingWedgeAngles,
            index_t numOfAngles = 180, index_t arc = 360, index_t solverIterations = 50,
            data_t rho1 = 1 / 2, data_t rho2 = 1);

        /// Simulates the sparse sinogram of the provided image and reconstructs the
        /// l1-regularization with shearlets by utilizing ADMM. By default the CUDA projector will
        /// be used if available.
        DataContainer<data_t> reconstructVisibleCoeffsOfSparseCT(
            DataContainer<data_t> image, index_t numOfAngles = 180, index_t arc = 360,
            index_t solverIterations = 50, data_t rho1 = 1 / 2, data_t rho2 = 1);

        //        /// Train the PhantomNet model to be able to learn the invisible coefficients in
        //        the Fourier
        //        /// domain.
        //        // TODO not sure if elsa ml can properly train fully convolutional NNs, if not I'd
        //        prefer to
        //        //  keep this, but commented out
        //        void trainPhantomNet(const std::vector<DataContainer<data_t>>& x,
        //                             const std::vector<DataContainer<data_t>>& y, index_t epochs =
        //                             20);

        /// Simply adds both the coefficients and applies the inverse shearlet transform to it. A
        /// new ShearletTransform object will be created, therefore its spectra has to be
        /// recomputed. The visCoeffs will be generated by applying the shearlet transform to the
        /// output of the model-based reconstruction, and the invisCoeffs will be the prediction of
        /// the PhantomNet model.
        DataContainer<data_t>
            combineVisCoeffsToInpaintedInvisCoeffs(DataContainer<data_t> visCoeffs,
                                                   DataContainer<data_t> invisCoeffs);

        //        ml::PhantomNet phantomNet;
    };
} // namespace elsa
