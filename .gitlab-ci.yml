stages:
- docker-build
- static-test
- compile
- test
- sanitizer
- coverage
- docs

### variables ###

variables:
  DOCKER_REGISTRY_URL: "docker.ciip.in.tum.de:5000" 
  CLANG_TIDY_IMAGE: "${DOCKER_REGISTRY_URL}/elsa/clang-tidy:8"
  CUDA_IMAGE: "${DOCKER_REGISTRY_URL}/elsa/cuda:11.2"
  SANITIZER_IMAGE: "${DOCKER_REGISTRY_URL}/elsa/gcc:10"
  COVERAGE_IMAGE: "${DOCKER_REGISTRY_URL}/elsa/coverage:10.2"
  # Removed soon
  CLANG_FORMAT_IMAGE: "${DOCKER_REGISTRY_URL}/elsa/clang-format:10"
  UBUNTU_IMAGE: "${DOCKER_REGISTRY_URL}/elsa/ubuntu:20.04"
  GPU_ONLY_IMAGE: "${DOCKER_REGISTRY_URL}/elsa/cuda-clang:10.0"
  GCC_IMAGE: "$CI_REGISTRY/ip/elsa/pybinds:gcc-10"
  CLANG9_IMAGE: "${DOCKER_REGISTRY_URL}/elsa/clang-pybinds:9"
  CLANG10_IMAGE: "${DOCKER_REGISTRY_URL}/elsa/clang-pybinds:10"

### Cache setup ###

# Caches should only be used for caching between pipelines not jobs
# By default, have a unique and separate cache for each branch and job in the CI, otherwhise it can happen that 
# different build configurations are spilled into different jobs and sporadic build failure occures.
cache:
  key: "$CI_COMMIT_REF_SLUG-$CI_JOB_STAGE-$CI_JOB_NAME" 
  paths:
    - build/_deps/*

### job templates ###

#### Schedule jobs ####

# run job only only on schedules
.job_template: &nightly_job
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule"'

# run job if connected to a schedule, merge request or some other things
.job_template: &run_on_merge_requests
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule"'
    - when: never

# always run this job
.job_template: &run_always
  rules:
    - when: always

#### Build job templates ####

.job_template: &build_job_artifact
  <<: *run_always
  stage: compile
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      # The actual build artifacts
      - build/bin
      - build/lib
      - build/pyelsa/
      - build/elsa/elsaConfig.cmake
      - build/elsa/elsaConfigVersion.cmake

      # If we ever generate headers, store them as well
      - build/elsa/**/*.h

      # CTest files
      - build/**/CTestTestfile.cmake
      - build/**/tests/test_*include-*.cmake
      - build/**/tests/test_*tests-*.cmake
      - build/Testing
      - build/junit_report.xml

      # Add elsa install to artifact
      - install-elsa/include/elsa/**/*.h
      - install-elsa/include/elsa/**/*.hpp
      - install-elsa/include/elsa/**/*.cuh
      - install-elsa/lib/cmake/elsa/**/*.cmake
      - install-elsa/lib/libelsa*.a
      # Add doctest install to artifact
      - install-elsa/include/doctest/**/*.h
      - install-elsa/lib/cmake/doctest/**/*.cmake
      # Add spdlog install to artifact
      - install-elsa/include/spdlog/**/*.h
      - install-elsa/lib/cmake/spdlog/**/*.cmake
      - install-elsa/lib/libspdlog.a
      - install-elsa/lib/pkgconfig/spdlog.pc
    exclude:
      - build/_deps/*
    expire_in: 60 mins

.buildjob_script_normal:
  script: &buildjob_normal
    - mkdir -p build
    - cd build
    - if [ $COMPILER == "clang" ]; then CMAKE_EXTRA_ARGS="-DCMAKE_CXX_FLAGS=\"-stdlib=libc++\" -DCMAKE_EXE_LINKER_FLAGS=\"-lc++abi\""; fi;
    - cmake .. -GNinja -DELSA_BENCHMARKS=ON -DCMAKE_INSTALL_PREFIX="../install-elsa" $CMAKE_EXTRA_ARGS
    - ninja
    - ninja build-tests
    - ninja build-benchmarks
    - ninja build-examples
    - ninja install

#### Test job templates ####

.testjob_template: &test_job_artifact
  <<: *run_always
  script:
    - cd build
    - ctest --schedule-random --output-junit junit_report.xml || ctest --rerun-failed --output-on-failure
  artifacts:
    name: "$CI_COMMIT_REF_SLUG-$CI_JOB_NAME"
    paths:
      - build/
    expire_in: 60 mins
    reports:
      junit: "build/junit_report.xml"

#### Install job templates ####

.installjob_anchors: &install_job
  <<: *run_on_merge_requests
  script:
    - git clone https://gitlab.lrz.de/IP/elsa_testing.git /tmp/elsa_testing
    - cd /tmp/elsa_testing
    - mkdir -p build/ && cd build/
    - cmake .. -GNinja -DELSA_INSTALL_DIR="$CI_PROJECT_DIR/install-elsa" $CMAKE_EXTRA_ARGS
    - ninja

### static test ###

clang-format:
  <<: *run_always
  stage: static-test
  image: $CI_REGISTRY/ip/elsa/clang:14
  script:
    ./tools/ci_scripts/clang-format-test.sh
  tags:
    - linux
    - elsa
    - clang

clang-tidy:
  <<: *run_always
  stage: static-test
  image: $CLANG_TIDY_IMAGE
  script:
    ./tools/ci_scripts/clang-tidy.sh
  tags:
    - linux
    - elsa
    - clang

comment-formating:
  <<: *run_always
  stage: static-test
  image: $CI_REGISTRY/ip/elsa/clang:14
  script:
    ./tools/ci_scripts/check-comment-style.sh
  allow_failure: true
  tags:
    - linux
    - elsa
    - clang

.cmake-format:
  <<: *run_always
  stage: static-test
  image: $CI_REGISTRY/ip/elsa/clang:14
  script:
    ./tools/ci_scripts/cmake-format-test.sh
  tags:
    - linux
    - elsa
    - clang

cmake-lint:
  <<: *run_always
  stage: static-test
  image: $CI_REGISTRY/ip/elsa/clang:14
  script:
    ./tools/ci_scripts/cmake-lint-test.sh
  tags:
    - linux
    - elsa
    - clang

### compile jobs ###

build:
  <<: *build_job_artifact
  image: $CI_REGISTRY/ip/elsa/pybind:$COMPILER-$COMPILER_VERSION
  script:
  - *buildjob_normal
  parallel:
    matrix:
      - COMPILER_VERSION: [10, 11, 12, 13]
        COMPILER: clang
      - COMPILER_VERSION: [11, 12]
        COMPILER: gcc
  tags:
    - linux
    - elsa
    - $COMPILER

build-cuda:
  <<: *build_job_artifact
  image: $CUDA_IMAGE
  script:
    - mkdir -p build
    - cd build
    - cmake .. -GNinja -DELSA_CUDA_VECTOR=ON -DELSA_BENCHMARKS=ON -DCMAKE_INSTALL_PREFIX="../install-elsa"
    - ninja
    - ninja build-tests
    - ninja build-benchmarks
    - ninja build-examples
    - ninja install
  tags:
    - linux
    - elsa
    - gcc
    - cuda

### test jobs ###

# At the time of writing, variables from the parallel:matrix can not be used in the dependency list
# see https://gitlab.com/gitlab-org/gitlab/-/merge_requests/82734 and 
# https://forum.gitlab.com/t/ci-specifying-artifact-dependencies-when-using-parallel-matrix/45026/2
# TODO: Once this is implemented use it!
test-gcc11:
  <<: *test_job_artifact
  stage: test
  image: $CI_REGISTRY/ip/elsa/pybind:gcc-11
  dependencies:
    - "build: [11, gcc]"
  tags:
    - linux
    - elsa
    - gcc
       
test-gcc12:
  <<: *test_job_artifact
  stage: test
  image: $CI_REGISTRY/ip/elsa/pybind:gcc-12
  dependencies:
    - "build: [12, gcc]"
  tags:
    - linux
    - elsa
    - gcc

test-clang10:
  <<: *test_job_artifact
  stage: test
  image: $CI_REGISTRY/ip/elsa/pybind:clang-10
  dependencies:
    - "build: [10, clang]"
  tags:
    - linux
    - elsa
    - clang

test-clang11:
  <<: *test_job_artifact
  stage: test
  image: $CI_REGISTRY/ip/elsa/pybind:clang-11
  dependencies:
    - "build: [11, clang]"
  tags:
    - linux
    - elsa
    - clang

test-clang12:
  <<: *test_job_artifact
  stage: test
  image: $CI_REGISTRY/ip/elsa/pybind:clang-12
  dependencies:
    - "build: [12, clang]"
  tags:
    - linux
    - elsa
    - clang

test-clang13:
  <<: *test_job_artifact
  stage: test
  image: $CI_REGISTRY/ip/elsa/pybind:clang-13
  dependencies:
    - "build: [13, clang]"
  tags:
    - linux
    - elsa
    - clang

test-cuda:
  <<: *test_job_artifact
  stage: test
  image: $CUDA_IMAGE
  dependencies:
    - build-cuda
  tags:
    - linux
    - elsa
    - gcc
    - cuda

### Install jobs ###

install-gcc11:
  <<: *install_job
  stage: test
  image: $CI_REGISTRY/ip/elsa/pybind:gcc-11
  dependencies:
    - "build: [11, gcc]"
  tags:
    - linux
    - elsa
    - gcc

install-gcc12:
  <<: *install_job
  stage: test
  image: $CI_REGISTRY/ip/elsa/pybind:gcc-12
  dependencies:
    - "build: [12, gcc]"
  tags:
    - linux
    - elsa
    - gcc

install-clang10:
  <<: *install_job
  stage: test
  image: $CI_REGISTRY/ip/elsa/pybind:clang-10
  dependencies:
    - "build: [10, clang]"
  variables:
    CMAKE_EXTRA_ARGS: "-DCMAKE_CXX_FLAGS=\"-stdlib=libc++\" -DCMAKE_EXE_LINKER_FLAGS=\"-lc++abi\""
  tags:
    - linux
    - elsa
    - clang

install-clang11:
  <<: *install_job
  stage: test
  image: $CI_REGISTRY/ip/elsa/pybind:clang-11
  dependencies:
    - "build: [11, clang]"
  variables:
    CMAKE_EXTRA_ARGS: "-DCMAKE_CXX_FLAGS=\"-stdlib=libc++\" -DCMAKE_EXE_LINKER_FLAGS=\"-lc++abi\""
  tags:
    - linux
    - elsa
    - clang

install-clang12:
  <<: *install_job
  stage: test
  image: $CI_REGISTRY/ip/elsa/pybind:clang-12
  dependencies:
    - "build: [12, clang]"
  variables:
    CMAKE_EXTRA_ARGS: "-DCMAKE_CXX_FLAGS=\"-stdlib=libc++\" -DCMAKE_EXE_LINKER_FLAGS=\"-lc++abi\""
  tags:
    - linux
    - elsa
    - clang

install-clang13:
  <<: *install_job
  stage: test
  image: $CI_REGISTRY/ip/elsa/pybind:clang-13
  dependencies:
    - "build: [13, clang]"
  variables:
    CMAKE_EXTRA_ARGS: "-DCMAKE_CXX_FLAGS=\"-stdlib=libc++\" -DCMAKE_EXE_LINKER_FLAGS=\"-lc++abi\""
  tags:
    - linux
    - elsa
    - clang

       
install-cuda:
  <<: *install_job
  stage: test
  image: $CUDA_IMAGE
  dependencies:
    - build-cuda
  script:
    - git clone https://gitlab.lrz.de/IP/elsa_testing.git /tmp/elsa_testing
    - cd /tmp/elsa_testing
    - mkdir -p build/ && cd build/
    - cmake .. -GNinja -DELSA_INSTALL_DIR="$CI_PROJECT_DIR/install-elsa" -DELSA_CUDA_VECTOR=ON
    - ninja
  tags:
    - linux
    - elsa
    - gcc
    - cuda

### sanitizers ###

cuda-memcheck:
  <<: *run_on_merge_requests
  stage: sanitizer
  image: $CUDA_IMAGE
  script:
    ./tools/ci_scripts/cuda-memcheck.sh
  dependencies:
    - test-cuda
  tags:
    - linux
    - elsa
    - gcc
    - cuda

# Be sure to run this job with container which has privaledge mode set
asan-ubsan:
  <<: *run_on_merge_requests
  stage: sanitizer
  image: $SANITIZER_IMAGE
  dependencies: []
  script:
    - mkdir -p build
    - cd build
    - cmake -GNinja -DELSA_BUILD_CUDA_PROJECTORS=OFF -DELSA_BUILD_PYTHON_BINDINGS=OFF -DCMAKE_BUILD_TYPE=Debug -DELSA_SANITIZER="Address;Undefined" ..
    - ninja tests
  tags:
    - linux
    - elsa
    - gcc
    - cuda


### test coverage ###

# Enforce GCC for test coverage, as our coverage only works with gcov and acts weird with clang
test-coverage:
  <<: *run_on_merge_requests
  stage: coverage
  image: $COVERAGE_IMAGE
  dependencies: []
  script:
    - mkdir -p build
    - cd build
    - CXX=g++ cmake .. -GNinja -DELSA_BUILD_PYTHON_BINDINGS=OFF -DCMAKE_BUILD_TYPE=Debug -DELSA_COVERAGE=ON
    - ninja tests
    - ninja test_coverage
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-coverage"
    paths:
      - build/test_coverage/
    expire_in: 60 mins
  tags:
    - linux
    - elsa
    - gcc
    - cuda


### deploy docs and coverage report ###

deploy-docs:
  <<: *nightly_job
  stage: docs
  dependencies:
    - test-coverage
  script:
    - mkdir -p build
    - cd build
    - cmake .. -GNinja
    - ninja docs
    - cp -r docs/sphinx/* /var/www/ciip/elsadocs/
    - cd ..
    - cp -r build/test_coverage/* /var/www/ciip/elsacoverage/
  tags:
    - elsa-docs-deploy


### build, test and deploy docker images ###
.deploy-docker:
  <<: *nightly_job
  stage: docker
  dependencies: []
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule"'
    - changes:
      - tools/docker/*
  script:
    - cd tools/docker
    - ./buildDockerContainers.sh
  tags:
    - elsa
    - shell

### Docker jobs ###

.build-docker-base:
  stage: docker-build
  # dependencies: []
  # rules:
  #   - changes:
  #     - tools/docker/*
  before_script:
    - docker info
  script:
    - cd tools/docker
    - echo "Building image for $COMPILER version $COMPILER_VERSION"
    - image=elsa/$COMPILER:$COMPILER_VERSION
    - pybind=elsa/pybind:$COMPILER-$COMPILER_VERSION
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -f ${DOCKER_FILE} -t $image --build-arg="VERSION=$COMPILER_VERSION" .
    - docker image tag $image $CI_REGISTRY/ip/$image
    - docker push $CI_REGISTRY/ip/$image
    - docker build -f DocFilePyBinds -t $pybind --build-arg IMAGE="$image" --build-arg LLVM_PKG_VERSION="$LLVM_VERSION" .
    - docker image tag $pybind $CI_REGISTRY/ip/$pybind
    - docker push $CI_REGISTRY/ip/$pybind
  tags:
    - docker

build-docker-compiler:
  extends: .build-docker-base
  variables:
    LLVM_VERSION: 11 # Debian currently has no other version available
  parallel:
    matrix:
      - COMPILER: "clang"
        COMPILER_VERSION: [10, 11, 12, 13, 14]
        DOCKER_FILE: DocFileClangBase
      - COMPILER: "gcc"
        COMPILER_VERSION: [9, 10, 11, 12]
        DOCKER_FILE: DocFileGccBase
