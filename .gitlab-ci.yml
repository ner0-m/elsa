stages:
- static-test
- compile
- test
- sanitizer
- coverage
- docs

### variables ###

variables:
  ANALYSIS_IMAGE: "elsa/static-analysis:8"
  GCC_IMAGE: "elsa/gcc:9"
  CLANG_IMAGE: "elsa/clang:9"
  CUDA_IMAGE: "elsa/cuda:10.2"
  UBUNTU_IMAGE: "elsa/ubuntu:18.04"
  GPU_ONLY_IMAGE: "elsa/cuda:10.0"

### Cache setup ###

# Caches should only be used for caching
# between pipelines not jobs, artifacts should be prefered for that
# Therefore, we cache the submodules, so that they don't have to be 
# downloaded so frequently
cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - thirdparty/
    - .git/modules 


### job templates ###

#### Schedule jobs ####

# run job only only on schedules
.job_template: &nightly_job
  only:
    - schedules

# run job if conntect to a schedule, merge request or some other things
.job_template: &run_on_merge_requests
  only:
    - merge_requests
    - schedules
    - master
    - web
    - triggers
    - api 

# always run this job
.job_template: &run_always
  only:
    - merge_requests
    - branches
    - tags
    - api
    - pushes
    - schedules
    - triggers
    - web

#### Build job templates ####
       
.job_template: &build_job_artifact
  <<: *run_always 
  stage: compile
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - build/
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - build/
    expire_in: 60 mins

.buildjob_script_clang:
  script: &buildjob_clang
    - mkdir -p build
    - cd build
    - cmake .. -GNinja -DELSA_BENCHMARKS=ON -DELSA_CREATE_JUNIT_REPORTS=ON -DCMAKE_CXX_FLAGS="-stdlib=libc++" -DCMAKE_EXE_LINKER_FLAGS="-lc++abi"
    - ninja
    - ninja build-benchmarks 
    - ninja build-examples 

.buildjob_script_normal:
  script: &buildjob_normal
    - mkdir -p build
    - cd build
    - cmake .. -GNinja -DELSA_BENCHMARKS=ON -DELSA_CREATE_JUNIT_REPORTS=ON
    - ninja
    - ninja build-benchmarks 
    - ninja build-examples 

#### Test job templates ####

.testjob_template: &test_job_artifact
  <<: *run_always 
  script: 
    - cd build
    - ninja tests
  artifacts:
    name: "$CI_COMMIT_REF_SLUG-$CI_JOB_NAME"
    paths:
      - build/
    expire_in: 60 mins
    reports:
      junit: "build/test_reports/test_*.xml"

#### Install job templates ####
 
.installjob_clang_anchors:
  script: &installjob_script_clang
    - git clone https://gitlab.lrz.de/IP/elsa_testing.git /tmp/elsa_testing
    - cd /tmp/elsa_testing
    - mkdir -p build/ && cd build/
    - cmake .. -GNinja -DCMAKE_CXX_FLAGS="-stdlib=libc++" -DCMAKE_EXE_LINKER_FLAGS="-lc++abi"
    - ninja 

.installjob_default_anchors:
  script: &installjob_script
    - git clone https://gitlab.lrz.de/IP/elsa_testing.git /tmp/elsa_testing
    - cd /tmp/elsa_testing
    - mkdir -p build/ && cd build/
    - cmake .. -GNinja
    - ninja 

.installjob_anchors: &install_job
  <<: *run_on_merge_requests 
  before_script: &installjob_before_script
    - cd build
    - ninja install
  cache: &install_cache
    key: "$CI_COMMIT_REF_SLUG-$CI_JOB_NAME"
    paths:
      - thirdparty/
      - .git/modules 
      - /tmp/elsa_testing 
 
### static test ###

clang-format:
  <<: *run_always 
  stage: static-test
  image: $ANALYSIS_IMAGE
  before_script:
    - git submodule sync
    - git submodule update --init
  script:
    ./tools/ci_scripts/clang-format-test.sh
  tags:
    - linux
    - elsa
    - clang

clang-tidy:
  <<: *run_always 
  stage: static-test
  image: $ANALYSIS_IMAGE
  script:
    ./tools/ci_scripts/clang-tidy.sh
  tags:
    - linux
    - elsa
    - clang


### compile jobs ###

build-ubuntu:
  <<: *build_job_artifact
  image: $UBUNTU_IMAGE
  script: *buildjob_normal
  tags:
    - linux
    - elsa

build-gcc:
  <<: *build_job_artifact
  image: $GCC_IMAGE
  script: *buildjob_normal
  tags:
    - linux
    - elsa
    - gcc

build-clang:
  <<: *build_job_artifact
  image: $CLANG_IMAGE
  script: *buildjob_clang
  tags:
    - linux
    - elsa
    - clang

build-cuda:
  <<: *build_job_artifact
  image: $CUDA_IMAGE
  script: *buildjob_normal
  tags:
    - linux
    - elsa
    - gcc
    - cuda

build-gpu-only:
  <<: *build_job_artifact
  image: $GPU_ONLY_IMAGE
  script:
    - mkdir -p build
    - cd build
    - cmake .. -GNinja -DELSA_BENCHMARKS=ON -DCMAKE_CXX_FLAGS="-stdlib=libc++" -DCMAKE_EXE_LINKER_FLAGS="-lc++abi" -DELSA_CUDA_VECTOR=ON
    - ninja
    - ninja build-benchmarks 
    - ninja build-examples 
  tags:
    - linux
    - elsa
    - gcc
    - cuda


### test jobs ###

test-ubuntu:
  <<: *test_job_artifact
  stage: test
  image: $UBUNTU_IMAGE
  dependencies:
    - build-ubuntu
  tags:
    - linux
    - elsa

test-gcc:
  <<: *test_job_artifact
  stage: test
  image: $GCC_IMAGE
  dependencies:
    - build-gcc
  tags:
    - linux
    - elsa
    - gcc

test-clang:
  <<: *test_job_artifact
  stage: test
  image: $CLANG_IMAGE
  dependencies:
    - build-clang
  tags:
    - linux
    - elsa
    - clang

test-cuda:
  <<: *test_job_artifact
  stage: test
  image: $CUDA_IMAGE
  dependencies:
    - build-cuda
  tags:
    - linux
    - elsa
    - gcc
    - cuda

test-gpu-only:
  <<: *test_job_artifact
  stage: test
  image: $GPU_ONLY_IMAGE
  dependencies:
    - build-gpu-only
  tags:
    - linux
    - elsa
    - gcc
    - cuda

install-gcc:
  <<: *install_job
  stage: test
  image: $GCC_IMAGE
  dependencies:
    - build-gcc
  script: *installjob_script
  tags:
    - linux
    - elsa
    - gcc

install-clang:
  <<: *install_job
  stage: test
  image: $CLANG_IMAGE
  dependencies:
    - build-clang
  script: *installjob_script_clang
  tags:
    - linux
    - elsa
    - clang

install-cuda:
  <<: *install_job
  stage: test
  image: $CUDA_IMAGE
  dependencies:
    - build-cuda
  script: *installjob_script
  tags:
    - linux
    - elsa
    - gcc
    - cuda

install-gpu-only:
  <<: *install_job
  stage: test
  image: $GPU_ONLY_IMAGE
  dependencies:
    - build-gpu-only
  script: 
    - git clone https://gitlab.lrz.de/IP/elsa_testing.git /tmp/elsa_testing
    - cd /tmp/elsa_testing
    - mkdir -p build/ && cd build/
    - cmake .. -GNinja -DCMAKE_CXX_FLAGS="-stdlib=libc++" -DCMAKE_EXE_LINKER_FLAGS="-lc++abi" -DELSA_CUDA_VECTOR=ON
    - ninja
  tags:
    - linux
    - elsa
    - gcc
    - cuda

### sanitizers ###

cuda-memcheck:
  <<: *run_on_merge_requests
  stage: sanitizer
  image: $GPU_ONLY_IMAGE
  script:
    ./tools/ci_scripts/cuda-memcheck.sh
  dependencies:
    - test-gpu-only
  tags:
    - linux
    - elsa
    - gcc
    - cuda

asan-ubsan:
  <<: *run_on_merge_requests
  stage: sanitizer
  image: $CUDA_IMAGE
  dependencies: [] 
  script:
    - mkdir -p build
    - cd build
    - rm -f CMakeCache.txt # remove cache, as we sometimes get the wrong cache
    - cmake -GNinja -DELSA_BUILD_CUDA_PROJECTORS=OFF -DCMAKE_BUILD_TYPE=Debug -DELSA_SANITIZER="Address;Undefined" ..
    - ninja tests
  tags:
    - linux
    - elsa
    - gcc
    - cuda


### test coverage ###

test-coverage:
  <<: *run_on_merge_requests
  stage: coverage
  image: $CUDA_IMAGE
  dependencies: [] 
  script:
    - mkdir -p build
    - cd build
    - cmake -GNinja -DCMAKE_BUILD_TYPE=Debug -DELSA_COVERAGE=ON ../
    - ninja tests
    - ninja test_coverage
  cache:
    key: "$CI_COMMIT_REF_SLUG-$CI_JOB_NAME"
    paths:
      - thirdparty/
      - .git/modules 
      - build/
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-coverage"
    paths:
      - build/test_coverage/
    expire_in: 60 mins
  tags:
    - linux
    - elsa
    - gcc
    - cuda


### deploy docs and coverage report ###

deploy-docs:
  <<: *nightly_job
  stage: docs
  dependencies:
    - test-coverage
  script:
    - mkdir -p build
    - cd build
    - cmake .. -GNinja
    - ninja docs
    - cp -r docs/sphinx/* /var/www/ciip/elsadocs/
    - cd ..
    - cp -r build/test_coverage/* /var/www/ciip/elsacoverage/
  tags:
    - elsa-docs-deploy


### build, test and deploy docker images ###
.deploy-docker:
  image: elsa/base:latest
  <<: *nightly_job
  stage: docker
  script:
    - cd tools/docker
    - ./buildDockerContainers.sh

### Test jobs ###

# These jobs, are for local build and test all in one job, should not be run with pipeline

.all-clang:
  image: $CLANG_IMAGE
  script: 
    - mkdir -p build
    - cd build
    - cmake .. -GNinja -DCMAKE_CXX_FLAGS="-stdlib=libc++" -DCMAKE_EXE_LINKER_FLAGS="-lc++abi"
    - ninja install
    - git clone https://gitlab.lrz.de/IP/elsa_testing.git /tmp/elsa_testing
    - cd /tmp/elsa_testing
    - mkdir -p build/ && cd build/
    - cmake .. -GNinja -DCMAKE_CXX_FLAGS="-stdlib=libc++" -DCMAKE_EXE_LINKER_FLAGS="-lc++abi"
    - ninja 

.all-gcc:
  image: $GCC_IMAGE
  script: 
    - mkdir -p build
    - cd build
    - cmake .. -GNinja
    - ninja install
    - git clone https://gitlab.lrz.de/IP/elsa_testing.git /tmp/elsa_testing
    - cd /tmp/elsa_testing
    - mkdir -p build/ && cd build/
    - cmake .. -GNinja
    - ninja 
