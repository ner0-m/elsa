stages:
- static-test
- compile
- test
- sanitizer
- coverage
- docs

### variables ###

variables:
  ANALYSIS_IMAGE: "elsa/static-analysis:8"
  GCC_IMAGE: "elsa/gcc:9"
  CLANG_IMAGE: "elsa/clang:9"
  CUDA_IMAGE: "elsa/cuda:10.2"
  UBUNTU_IMAGE: "elsa/ubuntu:18.04"
  GPU_ONLY_IMAGE: "elsa/cuda:10.0"


### job templates ###

.job_template: &nightly_job
  only:
    - schedules

.job_template: &build_job
  stage: compile
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - build/

.job_template: &build_job_artifact
  stage: compile
  cache:
    key: "$CI_JOB_NAME"
    paths:
      - build/
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - build/
    expire_in: 30 mins

.buildjob_script_clang:
  script: &buildjob_clang
    - mkdir -p build
    - cd build
    - cmake .. -GNinja -DCMAKE_CXX_FLAGS="-stdlib=libc++" -DCMAKE_EXE_LINKER_FLAGS="-lc++abi"
    - ninja

.buildjob_script_normal:
  script: &buildjob_normal
    - mkdir -p build
    - cd build
    - cmake .. -GNinja
    - ninja

.job_template: &test_job_artifact
  script:
    - cd build
    - cmake -GNinja -DELSA_CREATE_JUNIT_REPORTS=ON ..
    - ninja tests
  artifacts:
    reports:
      junit: "build/test_reports/test_*.xml"


### static test ###

clang-format:
  stage: static-test
  image: $ANALYSIS_IMAGE
  script:
    ./tools/ci_scripts/clang-format-test.sh
  tags:
    - linux
    - elsa
    - clang

clang-tidy:
  stage: static-test
  image: $ANALYSIS_IMAGE
  script:
    - mkdir -p build
    - cd build
    - cmake .. -GNinja -DELSA_CLANG_TIDY=ON -DELSA_CUDA_VECTOR=ON -DELSA_BENCHMARKS=ON
    - ninja build-tests
  artifacts: 
    paths:
    - build/clang-tidy-fix.txt
    expire_in: 1 week
  tags:
    - linux
    - elsa
    - clang


### compile jobs ###

build-ubuntu:
  <<: *build_job_artifact
  image: $UBUNTU_IMAGE
  script: *buildjob_normal
  tags:
    - linux
    - elsa

build-gcc:
  <<: *build_job_artifact
  image: $GCC_IMAGE
  script: *buildjob_normal
  tags:
    - linux
    - elsa
    - gcc

build-clang:
  <<: *build_job_artifact
  image: $CLANG_IMAGE
  script: *buildjob_clang
  tags:
    - linux
    - elsa
    - clang

build-cuda:
  <<: *build_job_artifact
  image: $CUDA_IMAGE
  script: *buildjob_normal
  tags:
    - linux
    - elsa
    - gcc
    - cuda

build-gpu-only:
  <<: *build_job_artifact
  image: $GPU_ONLY_IMAGE
  script:
    - mkdir -p build
    - cd build
    - cmake .. -GNinja -DCMAKE_CXX_FLAGS="-stdlib=libc++" -DCMAKE_EXE_LINKER_FLAGS="-lc++abi" -DELSA_CUDA_VECTOR=ON
    - ninja
  tags:
    - linux
    - elsa
    - gcc
    - cuda


### test jobs ###

test-ubuntu:
  <<: *test_job_artifact
  stage: test
  image: $UBUNTU_IMAGE
  dependencies:
    - build-ubuntu
  tags:
    - linux
    - elsa

test-gcc:
  <<: *test_job_artifact
  stage: test
  image: $GCC_IMAGE
  dependencies:
    - build-gcc
  tags:
    - linux
    - elsa
    - gcc

test-clang:
  <<: *test_job_artifact
  stage: test
  image: $CLANG_IMAGE
  dependencies:
    - build-clang
  tags:
    - linux
    - elsa
    - clang

test-cuda:
  <<: *test_job_artifact
  stage: test
  image: $CUDA_IMAGE
  dependencies:
    - build-cuda
  tags:
    - linux
    - elsa
    - gcc
    - cuda

test-gpu-only:
  stage: test
  image: $GPU_ONLY_IMAGE
  dependencies:
    - build-gpu-only
  script:
    - cd build
    - cmake -GNinja -DELSA_CREATE_JUNIT_REPORTS=ON ..
    - ninja tests
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      - build/
    expire_in: 30 mins
    reports:
      junit: "build/test_reports/test_*.xml"
  tags:
    - linux
    - elsa
    - gcc
    - cuda


### sanitizers ###

cuda-memcheck:
  stage: sanitizer
  image: $GPU_ONLY_IMAGE
  script:
    ./tools/ci_scripts/cuda-memcheck.sh
  dependencies:
    - test-gpu-only
  tags:
    - linux
    - elsa
    - gcc
    - cuda

asan-ubsan:
  <<: *nightly_job
  stage: sanitizer
  image: $CUDA_IMAGE
  script:
    - mkdir -p build
    - cd build
    - rm -f CMakeCache.txt # remove cache, as we sometimes get the wrong cache
    - cmake -GNinja -DELSA_BUILD_CUDA_PROJECTORS=OFF -DCMAKE_BUILD_TYPE=Debug -DELSA_SANITIZER="Address;Undefined" ..
    - ninja tests
  tags:
    - linux
    - elsa
    - gcc
    - cuda


### test coverage ###

test-coverage:
  <<: *nightly_job
  stage: coverage
  image: $CUDA_IMAGE
  dependencies: []
  script:
    - mkdir -p build
    - cd build
    - cmake -GNinja -DCMAKE_BUILD_TYPE=Debug -DELSA_COVERAGE=ON ../
    - ninja tests
    - ninja test_coverage
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-coverage"
    paths:
      - build/test_coverage/
    expire_in: 30 mins
  tags:
    - linux
    - elsa
    - gcc
    - cuda


### deploy docs and coverage report ###

deploy-docs:
  <<: *nightly_job
  stage: docs
  dependencies:
    - test-coverage
  script:
    - mkdir -p build
    - cd build
    - cmake .. -GNinja
    - ninja docs
    - cp -r docs/sphinx/* /var/www/ip/elsadocs/
    - cd ..
    - cp -r build/test_coverage/* /var/www/ip/elsacoverage/
  tags:
    - elsa-docs-deploy


### build, test and deploy docker images ###
.deploy-docker:
  image: elsa/base:latest
  <<: *nightly_job
  stage: docker
  script:
    - cd tools/docker
    - ./buildDockerContainers.sh

### Test jobs ###

# These jobs, are for local build and test all in one job, should not be run with pipeline

.all-clang:
  image: $CLANG_IMAGE
  script:
    - mkdir -p build
    - cd build
    - cmake .. -GNinja -DCMAKE_CXX_FLAGS="-stdlib=libc++" -DCMAKE_EXE_LINKER_FLAGS="-lc++abi"
    - ninja
    - ninja tests

.all-gcc:
  image: $GCC_IMAGE
  script:
    - mkdir -p build
    - cd build
    - cmake .. -GNinja
    - ninja
    - ninja tests

