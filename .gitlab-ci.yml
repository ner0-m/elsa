stages:
- static-test
- compile
- test
- sanitizer
- coverage
- docs
- docker

### variables ###

variables:
  DOCKER_REGISTRY_URL: "docker.ciip.in.tum.de:5000" 
  CLANG_FORMAT_IMAGE: "${DOCKER_REGISTRY_URL}/elsa/clang-format:10"
  CLANG_TIDY_IMAGE: "${DOCKER_REGISTRY_URL}/elsa/clang-tidy:8"
  GCC_IMAGE: "${DOCKER_REGISTRY_URL}/elsa/gcc-pybinds:10"
  CLANG9_IMAGE: "${DOCKER_REGISTRY_URL}/elsa/clang-pybinds:9"
  CLANG10_IMAGE: "${DOCKER_REGISTRY_URL}/elsa/clang-pybinds:10"
  CUDA_IMAGE: "${DOCKER_REGISTRY_URL}/elsa/cuda:10.2"
  UBUNTU_IMAGE: "${DOCKER_REGISTRY_URL}/elsa/ubuntu:20.04"
  GPU_ONLY_IMAGE: "${DOCKER_REGISTRY_URL}/elsa/cuda-clang:10.0"
  SANITIZER_IMAGE: "${DOCKER_REGISTRY_URL}/elsa/gcc:10"
  COVERAGE_IMAGE: "${DOCKER_REGISTRY_URL}/elsa/coverage:10.2"

### Cache setup ###

# Caches should only be used for caching between pipelines not jobs
# By default, have a unique and separate cache for each branch and job in the CI, otherwhise it can happen that 
# different build configurations are spilled into different jobs and sporadic build failure occures.
cache:
  key: "$CI_COMMIT_REF_SLUG-$CI_JOB_STAGE-$CI_JOB_NAME" 
  paths:
    - build/_deps/*

### job templates ###

#### Schedule jobs ####

# run job only only on schedules
.job_template: &nightly_job
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule"'

# run job if connected to a schedule, merge request or some other things
.job_template: &run_on_merge_requests
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule"'
    - when: never

# always run this job
.job_template: &run_always
  rules:
    - when: always

#### Build job templates ####

.job_template: &build_job_artifact
  <<: *run_always
  stage: compile
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    paths:
      # The actual build artifacts
      - build/bin
      - build/lib
      - build/pyelsa/
      - build/elsa/elsaConfig.cmake
      - build/elsa/elsaConfigVersion.cmake

      # If we ever generate headers, store them as well
      - build/elsa/**/*.h

      # CTest files
      - build/**/CTestTestfile.cmake
      - build/**/tests/test_*include-*.cmake
      - build/**/tests/test_*tests-*.cmake
      - build/Testing
      - build/junit_report.xml

      # Add elsa install to artifact
      - install-elsa/include/elsa/**/*.h
      - install-elsa/include/elsa/**/*.hpp
      - install-elsa/include/elsa/**/*.cuh
      - install-elsa/lib/cmake/elsa/**/*.cmake
      - install-elsa/lib/libelsa*.a
      # Add quickvec install to artifact
      - install-elsa/include/quickvec/**/*.h
      - install-elsa/include/quickvec/**/*.hpp
      - install-elsa/lib/cmake/quickvec/*.cmake
      - install-elsa/lib/libquickvec.a
      # Add doctest install to artifact
      - install-elsa/include/doctest/**/*.h
      - install-elsa/lib/cmake/doctest/**/*.cmake
      # Add spdlog install to artifact
      - install-elsa/include/spdlog/**/*.h
      - install-elsa/lib/cmake/spdlog/**/*.cmake
      - install-elsa/lib/libspdlog.a
      - install-elsa/lib/pkgconfig/spdlog.pc
    exclude:
      - build/_deps/*
    expire_in: 60 mins

.buildjob_script_clang:
  script: &buildjob_clang
    - mkdir -p build
    - cd build
    - cmake .. -GNinja -DELSA_BENCHMARKS=ON  -DCMAKE_INSTALL_PREFIX="../install-elsa" -DCMAKE_CXX_FLAGS="-stdlib=libc++" -DCMAKE_EXE_LINKER_FLAGS="-lc++abi"
    - ninja
    - ninja build-tests
    - ninja build-benchmarks
    - ninja build-examples
    - ninja install

.buildjob_script_normal:
  script: &buildjob_normal
    - mkdir -p build
    - cd build
    - cmake .. -GNinja -DELSA_BENCHMARKS=ON -DCMAKE_INSTALL_PREFIX="../install-elsa"
    - ninja
    - ninja build-tests
    - ninja build-benchmarks
    - ninja build-examples
    - ninja install

#### Test job templates ####

.testjob_template: &test_job_artifact
  <<: *run_always
  script:
    - cd build
    - ctest --schedule-random --output-junit junit_report.xml || ctest --rerun-failed --output-on-failure
  artifacts:
    name: "$CI_COMMIT_REF_SLUG-$CI_JOB_NAME"
    paths:
      - build/
    expire_in: 60 mins
    reports:
      junit: "build/junit_report.xml"

#### Install job templates ####

.installjob_clang_anchors:
  script: &installjob_script_clang
    - git clone https://gitlab.lrz.de/IP/elsa_testing.git /tmp/elsa_testing
    - cd /tmp/elsa_testing
    - mkdir -p build/ && cd build/
    - cmake .. -GNinja -DELSA_INSTALL_DIR="$CI_PROJECT_DIR/install-elsa" -DCMAKE_CXX_FLAGS="-stdlib=libc++" -DCMAKE_EXE_LINKER_FLAGS="-lc++abi"
    - ninja

.installjob_default_anchors:
  script: &installjob_script
    - git clone https://gitlab.lrz.de/IP/elsa_testing.git /tmp/elsa_testing
    - cd /tmp/elsa_testing
    - mkdir -p build/ && cd build/
    - cmake .. -GNinja -DELSA_INSTALL_DIR="$CI_PROJECT_DIR/install-elsa"
    - ninja

.installjob_anchors: &install_job
  <<: *run_on_merge_requests

### static test ###

clang-format:
  <<: *run_always
  stage: static-test
  image: $CLANG_FORMAT_IMAGE
  script:
    ./tools/ci_scripts/clang-format-test.sh
  tags:
    - linux
    - elsa
    - clang

clang-tidy:
  <<: *run_always
  stage: static-test
  image: $CLANG_TIDY_IMAGE
  script:
    ./tools/ci_scripts/clang-tidy.sh
  tags:
    - linux
    - elsa
    - clang

comment-formating:
  <<: *run_always
  stage: static-test
  image: $CLANG_FORMAT_IMAGE
  script:
    ./tools/ci_scripts/check-comment-style.sh
  allow_failure: true
  tags:
    - linux
    - elsa
    - clang

.cmake-format:
  <<: *run_always
  stage: static-test
  image: $CLANG_FORMAT_IMAGE
  script:
    ./tools/ci_scripts/cmake-format-test.sh
  tags:
    - linux
    - elsa
    - clang

cmake-lint:
  <<: *run_always
  stage: static-test
  image: $CLANG_FORMAT_IMAGE
  script:
    ./tools/ci_scripts/cmake-lint-test.sh
  tags:
    - linux
    - elsa
    - clang

### compile jobs ###

build-ubuntu:
  <<: *build_job_artifact
  image: $UBUNTU_IMAGE
  script: *buildjob_normal
  tags:
    - linux
    - elsa

build-gcc:
  <<: *build_job_artifact
  image: $GCC_IMAGE
  script:
  - *buildjob_normal
  tags:
    - linux
    - elsa
    - gcc

build-clang9:
  <<: *build_job_artifact
  image: $CLANG9_IMAGE
  script:
  - *buildjob_clang
  - pip3 install matplotlib
  - PYTHONPATH="$PYTHONPATH:$(pwd)" python3 ../examples/solver_experiments.py --headless --max-iterations 1 --problem-size 16
  tags:
    - linux
    - elsa
    - clang

build-clang10:
  <<: *build_job_artifact
  image: $CLANG10_IMAGE
  script:
  - *buildjob_clang
  - pip3 install matplotlib
  - PYTHONPATH="$PYTHONPATH:$(pwd)" python3 ../examples/solver_experiments.py --headless --max-iterations 1 --problem-size 16
  tags:
    - linux
    - elsa
    - clang

build-cuda:
  <<: *build_job_artifact
  image: $CUDA_IMAGE
  script: *buildjob_normal
  tags:
    - linux
    - elsa
    - gcc
    - cuda

build-gpu-only:
  <<: *build_job_artifact
  image: $GPU_ONLY_IMAGE
  script:
    - mkdir -p build
    - cd build
    - cmake .. -GNinja -DELSA_BENCHMARKS=ON -DELSA_CUDA_VECTOR=ON -DCMAKE_INSTALL_PREFIX="../install-elsa" -DCMAKE_CXX_FLAGS="-stdlib=libc++" -DCMAKE_EXE_LINKER_FLAGS="-lc++abi"
    - ninja
    - ninja build-tests
    - ninja build-benchmarks
    - ninja build-examples
    - ninja install
  tags:
    - linux
    - elsa
    - gcc
    - cuda


### test jobs ###

test-ubuntu:
  <<: *test_job_artifact
  stage: test
  image: $UBUNTU_IMAGE
  dependencies:
    - build-ubuntu
  tags:
    - linux
    - elsa

test-gcc:
  <<: *test_job_artifact
  stage: test
  image: $GCC_IMAGE
  dependencies:
    - build-gcc
  tags:
    - linux
    - elsa
    - gcc

test-clang9:
  <<: *test_job_artifact
  stage: test
  image: $CLANG9_IMAGE
  dependencies:
    - build-clang9
  tags:
    - linux
    - elsa
    - clang

test-clang10:
  <<: *test_job_artifact
  stage: test
  image: $CLANG10_IMAGE
  dependencies:
    - build-clang10
  tags:
    - linux
    - elsa
    - clang

test-cuda:
  <<: *test_job_artifact
  stage: test
  image: $CUDA_IMAGE
  dependencies:
    - build-cuda
  tags:
    - linux
    - elsa
    - gcc
    - cuda

test-gpu-only:
  <<: *test_job_artifact
  stage: test
  image: $GPU_ONLY_IMAGE
  dependencies:
    - build-gpu-only
  tags:
    - linux
    - elsa
    - gcc
    - cuda

install-gcc:
  <<: *install_job
  stage: test
  image: $GCC_IMAGE
  dependencies:
    - build-gcc
  script: *installjob_script
  tags:
    - linux
    - elsa
    - gcc

install-clang9:
  <<: *install_job
  stage: test
  image: $CLANG9_IMAGE
  dependencies:
    - build-clang9
  script: *installjob_script_clang
  tags:
    - linux
    - elsa
    - clang

install-clang10:
  <<: *install_job
  stage: test
  image: $CLANG10_IMAGE
  dependencies:
    - build-clang10
  script: *installjob_script_clang
  tags:
    - linux
    - elsa
    - clang

install-cuda:
  <<: *install_job
  stage: test
  image: $CUDA_IMAGE
  dependencies:
    - build-cuda
  script: *installjob_script
  tags:
    - linux
    - elsa
    - gcc
    - cuda

install-gpu-only:
  <<: *install_job
  stage: test
  image: $GPU_ONLY_IMAGE
  dependencies:
    - build-gpu-only
  script:
    - git clone https://gitlab.lrz.de/IP/elsa_testing.git /tmp/elsa_testing
    - cd /tmp/elsa_testing
    - mkdir -p build/ && cd build/
    - cmake .. -GNinja -DELSA_INSTALL_DIR="$CI_PROJECT_DIR/install-elsa" -Dquickvec_DIR="$CI_PROJECT_DIR/install-elsa/lib/cmake/quickvec" -DCMAKE_CXX_FLAGS="-stdlib=libc++" -DCMAKE_EXE_LINKER_FLAGS="-lc++abi" -DELSA_CUDA_VECTOR=ON
    - ninja
  tags:
    - linux
    - elsa
    - gcc
    - cuda

### sanitizers ###

cuda-memcheck:
  <<: *run_on_merge_requests
  stage: sanitizer
  image: $GPU_ONLY_IMAGE
  script:
    ./tools/ci_scripts/cuda-memcheck.sh
  dependencies:
    - test-gpu-only
  tags:
    - linux
    - elsa
    - gcc
    - cuda

# Be sure to run this job with container which has privaledge mode set
asan-ubsan:
  <<: *run_on_merge_requests
  stage: sanitizer
  image: $SANITIZER_IMAGE
  dependencies: []
  script:
    - mkdir -p build
    - cd build
    - cmake -GNinja -DELSA_BUILD_CUDA_PROJECTORS=OFF -DELSA_BUILD_PYTHON_BINDINGS=OFF -DCMAKE_BUILD_TYPE=Debug -DELSA_SANITIZER="Address;Undefined" ..
    - ninja tests
  tags:
    - linux
    - elsa
    - gcc
    - cuda


### test coverage ###

# Enforce GCC for test coverage, as our coverage only works with gcov and acts weird with clang
test-coverage:
  <<: *run_on_merge_requests
  stage: coverage
  image: $COVERAGE_IMAGE
  dependencies: []
  script:
    - mkdir -p build
    - cd build
    - CXX=g++ cmake .. -GNinja -DELSA_BUILD_PYTHON_BINDINGS=OFF -DCMAKE_BUILD_TYPE=Debug -DELSA_COVERAGE=ON
    - ninja tests
    - ninja test_coverage
  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME-coverage"
    paths:
      - build/test_coverage/
    expire_in: 60 mins
  tags:
    - linux
    - elsa
    - gcc
    - cuda


### deploy docs and coverage report ###

deploy-docs:
  <<: *nightly_job
  stage: docs
  dependencies:
    - test-coverage
  script:
    - mkdir -p build
    - cd build
    - cmake .. -GNinja
    - ninja docs
    - cp -r docs/sphinx/* /var/www/ciip/elsadocs/
    - cd ..
    - cp -r build/test_coverage/* /var/www/ciip/elsacoverage/
  tags:
    - elsa-docs-deploy


### build, test and deploy docker images ###
.deploy-docker:
  <<: *nightly_job
  stage: docker
  dependencies: []
  rules:
    - if: '$CI_COMMIT_BRANCH == "master" && $CI_PIPELINE_SOURCE == "schedule"'
    - changes:
      - tools/docker/*
  script:
    - cd tools/docker
    - ./buildDockerContainers.sh
  tags:
    - elsa
    - shell


### Test jobs ###

# These jobs, are for local build and test all in one job, should not be run with pipeline

.all-clang:
  image: $CLANG9_IMAGE
  rules:
    - when: never
  script:
    - mkdir -p build
    - cd build
    - cmake .. -GNinja -DELSA_BENCHMARKS=ON -DCMAKE_CXX_FLAGS="-stdlib=libc++" -DCMAKE_EXE_LINKER_FLAGS="-lc++abi"
    - ninja
    - ninja tests

.all-gcc:
  image: $GCC_IMAGE
  rules:
    - when: never
  script:
    - *buildjob_normal
    - ninja tests
    - *installjob_script
